require 'digest/sha1'
class BusAccount < ActiveRecord::Base
  
  belongs_to :partner
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  
  attr_protected :role
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    return true if self.role=="admin"
    self.role == role_in_question.to_s
  end
  
  # ---------------------------------------
  
  #is the user in any of the specified roles?
  def role_one_of?(*roles)
    return false if roles.nil? or roles.length == 0
    roles.each do  |r|
      if self.role == r.to_s
        return true
      end
    end
    false
  end
  
  def has_pending_unapproved_projects?
    pending = Project.count_by_sql("SELECT COUNT(*) FROM pending_projects WHERE created_by = #{id} AND rejected = false AND rejection_reason IS NULL AND date_rejected IS NULL AND rejected_by IS NULL")
    pending > 0
  end
  
  def has_pending_rejected_projects?
    pending = Project.count_by_sql("SELECT COUNT(*) FROM pending_projects WHERE created_by = #{id} AND rejected = true AND rejection_reason IS NOT NULL AND date_rejected IS NOT NULL AND rejected_by IS NOT NULL")
    pending > 0
  end
    
  # Virtual attribute for the unencrypted password
  attr_accessor :password

  validates_presence_of     :login, :email
  validates_presence_of     :password,                   :if => :password_required?
  validates_presence_of     :password_confirmation,      :if => :password_required?
  validates_length_of       :password, :within => 4..40, :if => :password_required?
  validates_confirmation_of :password,                   :if => :password_required?
  validates_length_of       :login,    :within => 3..40
  validates_length_of       :email,    :within => 3..100
  validates_uniqueness_of   :login, :email, :case_sensitive => false
  before_save :encrypt_password

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = self.find_by_login(login) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end

  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    self.remember_token_expires_at = 2.weeks.from_now.utc
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  protected
    # before filter 
    def encrypt_password
      return if password.blank?
      self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
      self.crypted_password = encrypt(password)
    end
    
    def password_required?
      crypted_password.blank? || !password.blank?
    end
end
