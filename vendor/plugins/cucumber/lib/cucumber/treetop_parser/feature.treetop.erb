module Cucumber
module TreetopParser

grammar Feature
  rule root
    header whitespace* scenarios {      
      def feature
        f = Tree::Feature.new(header.text_value.strip)
        scenarios.populate(f)
        f
      end
    }
  end

  rule header
    (!step_scenario .)*
  end

  rule scenarios
    step_scenario more:(table / step_scenario)* {
      def populate(feature)
        step_scenario.populate(feature)
        more.elements.each { |m| m.populate(feature) }
      end
    }
  end

  rule step_scenario
    scenario_keyword ":" whitespace+ name:(!newline .)+ newline* blanks steps:step_or_given_scenario+ {
      def populate(feature)
        sc = feature.add_scenario(name.text_value.strip)
        steps.elements.each{|s| s.populate(sc)}
        Feature.last_scenario = sc
      end
    }
  end
  
  rule step_or_given_scenario
    step / given_scenario
  end
  
  rule step
    whitespace* step_keyword whitespace+ name:(!newline .)+ newline* blanks {
      def populate(scenario)
        line = input.line_of(interval.first)
        scenario.add_step(step_keyword.text_value, name.text_value.strip, line)
      end
    }
  end
  
  rule given_scenario
    given_scenario_keyword ":"? whitespace+ name:(!newline .)+ newline* blanks {
      def populate(scenario)
        line = input.line_of(interval.first)
        scenario.add_given_scenario(name.text_value.strip, line)
      end
    }
  end
  
  rule step_keyword
    '<%= words['given'] %>' / '<%= words['when'] %>' / '<%= words['then'] %>' / '<%= words['and'] %>'
  end
  
  rule scenario_keyword
    '<%= words['scenario'] %>'
  end
  
  rule given_scenario_keyword
    '<%= words['given_scenario'] %>'
  end

  rule table
    table_line more:(newline table_line)+ newline*
    {
      def populate(feature)
        Feature.last_scenario.table_header = table_line.values
        more.elements.each do |e|
          feature.add_row_scenario(Feature.last_scenario, e.table_line.values, e.table_line.line)
        end
      end
    }
  end

  rule table_line
    whitespace* separator cells:(whitespace* cell_value whitespace* separator)+
    {
      def values
        cells.elements.map { |cell| cell.cell_value.text_value.strip }
      end
      
      def line
        input.line_of(interval.first)
      end
    }
  end

  rule cell_value
    (!(separator / newline) .)*
  end

  rule separator
    '|'
  end

  rule blanks
    (newline / whitespace)*
  end

  rule newline
    "\r\n?" / "\n"
  end

  rule whitespace
    [ \t]
  end
end

end
end