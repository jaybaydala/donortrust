#!/usr/bin/env ruby

rails_root = File.expand_path(File.join(File.dirname(__FILE__)+"/.."))
RAILS_HOME = rails_root
PACKET_APP = rails_root + "/vendor/plugins/backgroundrb"
WORKER_ROOT = rails_root + "/lib/workers"

["server","server/lib","lib","lib/backgroundrb"].each { |x| $LOAD_PATH.unshift(PACKET_APP + "/#{x}")}
$LOAD_PATH.unshift(WORKER_ROOT)

require RAILS_HOME + '/config/boot.rb'

# parse CLI options and set RAILS_ENV before loading RoR environment
require "bdrb_config.rb"
BackgrounDRb::Config.parse_cmd_options ARGV

require RAILS_HOME + '/config/environment'
require "rubygems"
require "yaml"
require "erb"
require "logger"
require "packet"
require "backgroundrb_server"

CONFIG_FILE = BackgrounDRb::Config.read_config("#{RAILS_HOME}/config/backgroundrb.yml")
pid_file = "#{RAILS_HOME}/tmp/pids/backgroundrb_#{CONFIG_FILE[:backgroundrb][:port]}.pid"
SERVER_LOGGER = "#{RAILS_HOME}/log/backgroundrb_server_#{CONFIG_FILE[:backgroundrb][:port]}.log"

case ARGV[0]
when 'start'
  if fork
    exit
  else
    op = File.open(pid_file, "w")
    op.write(Process.pid().to_s)
    op.close
    if CONFIG_FILE[:backgroundrb][:log].nil? or CONFIG_FILE[:backgroundrb][:log] != 'foreground'
      log_file = File.open(SERVER_LOGGER,"w+")
      [STDIN, STDOUT, STDERR].each {|desc| desc.reopen(log_file)}
    end

    BackgrounDRb::MasterProxy.new()
  end
when 'stop'
  pid = nil
  File.open(pid_file, "r") { |pid_handle| pid = pid_handle.gets.strip.chomp.to_i }
  begin
    pgid =  Process.getpgid(pid)
    Process.kill('TERM', pid)
    Process.kill('-TERM', pgid)
    Process.kill('KILL', pid)
  rescue Errno::ESRCH => e
    puts "Deleting pid file"
  rescue
    puts $!
  ensure
    File.delete(pid_file) if File.exists?(pid_file)
  end
else
  BackgrounDRb::MasterProxy.new()
end
