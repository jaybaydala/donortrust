-----------------------------
<%= color('Capistrano', :bold) %>
-----------------------------

Capistrano is a utility for automating the execution of commands across multiple remote machines. It was originally conceived as an aid to deploy Ruby on Rails web applications, but has since evolved to become a much more general-purpose tool.

The command-line interface to Capistrano is via the `cap' command.

	cap [ option ] ... action ...

The following options are understood:

  <%= color '-e, --explain TASK', :bold %>
	Displays the extended description of the given task. Not all tasks will have an extended description, but for those that do, this can provide a wealth of additional usage information, such as describing environment variables or settings that can affect the execution of the task.

  <%= color '-F, --default-config', :bold %>
	By default, cap will search for a config file named `Capfile' or `capfile' in the current directory, or in any parent directory, and will automatically load it. However, if you specify the -f flag (see below), cap will use that file instead of the default config. If you want to use both the default config, and files loaded via -f, you can specify -F to force cap to search for and load the default config, even if additional files were specified via -f.

  <%= color '-f, --file FILE', :bold %>
	Causes the named file to be loaded. Capistrano will search both its own recipe directory, as well as the current directory, looking for the named file. An ".rb" extension is optional. The -f option may be given any number of times, but if it is given, it will take the place of the normal `Capfile' or `capfile' detection. Use -F if you want the default capfile to be loaded when you use -f.

  <%= color '-H, --long-help', :bold %>
	Displays this document and exits.

  <%= color '-h, --help', :bold %>
	Shows a brief summary of these options and exits.

  <%= color '-p, --password', :bold %>
	Normally, cap will prompt for the password on-demand, the first time it is needed. This can make it hard to walk away from Capistrano, since you might not know if it will prompt for a password down the road. In such cases, you can use the -p option to force cap to prompt for the password immediately.

  <%= color '-q, --quiet', :bold %>
	Display only critical error messages. All other output is suppressed.

  <%= color '-S, --set-before NAME=VALUE', :bold %>
	Sets the given variable to the given value, before loading any recipe files. This is useful if you have a recipe file that depends on a certain variable being set, at the time it is loaded.

  <%= color '-s, --set NAME=VALUE', :bold %>
	Sets the given variable to the given value, after loading all recipe files. This is useful when you want to override the value of a variable which is used in a task. Note that this will set the variables too late for them to affect conditions that are executed as the recipes are loaded.

  <%= color '-T, --tasks', :bold %>
	Displays the list of all tasks in all loaded recipe files. If a task has no description, or if the description starts with the [internal] tag, the task will not be listed unless you also specify -v.

  <%= color '-V, --version', :bold %>
	Shows the current Capistrano version number and exits.

  <%= color '-v, --verbose', :bold %>
	Increase the verbosity. You can specify this option up to three times to further increase verbosity. By default, cap will use maximum verbosity, but if you specify an explicit verbosity, that will be used instead. See also -q.

  <%= color '-X, --skip-system-config', :bold %>
	By default, cap will look for and (if it exists) load the global system configuration file located in /etc/capistrano.conf. If you don't want cap to load that file, give this option.

  <%= color '-x, --skip-user-config', :bold %>
	By default, cap will look for and (if it exists) load the user-specific configuration file located in $HOME/.caprc. If you don't want cap to load that file, give this option.
